generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model apiTokens {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int?      @db.UnsignedInt
  name       String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  token      String    @unique(map: "api_tokens_token_unique") @db.VarChar(255)
  expires_at DateTime  @db.Timestamp(0)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  users      user?     @relation(fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction, map: "api_tokens_user_id_foreign")

  @@index([user_id], map: "api_tokens_user_id_foreign")
  @@map("api_tokens")
}

model productOptionGroup {
  pcoid                Int                 @id @default(autoincrement()) @db.UnsignedInt
  pid                  Int?                @db.UnsignedInt
  label                String              @db.VarChar(32)
  created_at           DateTime?           @default(now()) @db.Timestamp(0)
  updated_at           DateTime?           @default(now()) @db.Timestamp(0)
  products             product?            @relation(fields: [pid], references: [pid], onDelete: Cascade, onUpdate: NoAction, map: "product_option_groups_pid_foreign")
  product_option_items productOptionItem[]

  @@index([pid], map: "index_pid")
  @@map("product_option_groups")
}

model productOptionItem {
  pcoiid                Int                 @id @default(autoincrement()) @db.UnsignedInt
  pcoid                 Int?                @db.UnsignedInt
  label                 String              @db.VarChar(32)
  value                 String              @db.VarChar(32)
  created_at            DateTime?           @default(now()) @db.Timestamp(0)
  updated_at            DateTime?           @default(now()) @db.Timestamp(0)
  product_option_groups productOptionGroup? @relation(fields: [pcoid], references: [pcoid], onDelete: Cascade, onUpdate: NoAction, map: "product_option_items_pcoid_foreign")

  @@index([pcoid], map: "index_pcoid")
  @@map("product_option_items")
}

model productVariantGroup {
  pcvid                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  pid                   Int?                 @db.UnsignedInt
  sku                   String               @db.VarChar(32)
  imageUrl              String?              @map("image_url") @db.VarChar(128)
  createdAt             DateTime?            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt             DateTime?            @default(now()) @map("updated_at") @db.Timestamp(0)
  products              product?             @relation(fields: [pid], references: [pid], onDelete: Cascade, onUpdate: NoAction, map: "product_variant_groups_pid_foreign")
  product_variant_items productVariantItem[]

  @@index([pid], map: "index_pid_for_variants")
  @@map("product_variant_groups")
}

model productVariantItem {
  pcviid                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  pcvid                  Int?                 @db.UnsignedInt
  optionGroupId          Int?                 @map("option_group_id")
  optionItemId           Int?                 @map("option_item_id")
  product_variant_groups productVariantGroup? @relation(fields: [pcvid], references: [pcvid], onDelete: Cascade, onUpdate: NoAction, map: "product_variant_items_pcvid_foreign")

  @@index([pcvid], map: "index_pcvid_for_variant_item")
  @@map("product_variant_items")
}

model productAdditionalDataGroup {
  padgid Int    @id @default(autoincrement()) @db.UnsignedInt
  pid    Int    @db.UnsignedInt
  label  String @db.VarChar(32)

  //  Relations
  products                    product                     @relation(fields: [pid], references: [pid], onDelete: Cascade, onUpdate: NoAction, map: "product_additional_groups_pid_foregin")
  productsAdditionalDataItems productAdditionalDataItem[]

  @@index([pid], map: "index_pid_for_additional_data")
  @@map("products_additional_data_group")
}

model productAdditionalDataItem {
  padiid  Int    @id @default(autoincrement()) @db.UnsignedInt
  padgid  Int    @db.UnsignedInt
  label   String @db.VarChar(32)
  feature String @db.VarChar(64)

  // Relations
  productAdditionalDataGroup       productAdditionalDataGroup? @relation(fields: [padgid], references: [padgid])

  @@map("products_additional_data_item")
}

model productReviews {
  prid   Int    @id @default(autoincrement()) @db.UnsignedInt
  pid    Int    @db.UnsignedInt
  review String @db.VarChar(64)
  rate   Int    @db.UnsignedInt

  // Relations
  products product @relation(fields: [pid], references: [pid], onDelete: Cascade, onUpdate: NoAction, map: "product_reviews_pid_foregin")

  @@map("product_reviews")
}

model brand {
  bid       Int       @id @default(autoincrement()) @db.UnsignedInt
  name      String    @unique(map: "brands_name_unique") @db.VarChar(64)
  imageUrl  String    @db.VarChar(256)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  product   product[]

  @@map("brands")
}

model product {
  pid                           Int                          @id @default(autoincrement()) @db.UnsignedInt
  typename                      products___typename?         @default(BASE) @map("__typename")
  name                          String                       @db.VarChar(64)
  description                   String?                      @db.VarChar(512)
  price                         Float                        @db.Float
  productImage                  String?                      @map("product_image") @db.VarChar(255)
  bid                           Int?                         @db.UnsignedInt
  createdAt                     DateTime?                    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                     DateTime?                    @default(now()) @map("updated_at") @db.Timestamp(0)
  // Relations
  product_variant_groups        productVariantGroup[]
  product_option_groups         productOptionGroup[]
  brand_relation                brand?                       @relation(fields: [bid], references: [bid], onDelete: Cascade)
  product_additional_data_group productAdditionalDataGroup[]
  product_reviews                productReviews[]

  @@map("products")
}

model user {
  uid        Int         @id @default(autoincrement()) @db.UnsignedInt
  email      String      @unique(map: "users_email_unique") @db.VarChar(128)
  password   String      @db.VarChar(256)
  birthday   DateTime    @db.Timestamp(0)
  role       users_role  @default(USER)
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @default(now()) @db.Timestamp(0)
  api_tokens apiTokens[]
  wishlist   wishlist[]

  @@map("users")
}

model wishlist {
  wishlistId    Int            @id @default(autoincrement()) @map("wishlist_id") @db.UnsignedInt
  wishlistToken String         @unique @default(uuid()) @map("wishlist_token") @db.VarChar(128)
  isGuestCard   Boolean        @default(true) @map("is_guest_card")
  userId        Int?           @map("user_id") @db.UnsignedInt
  user          user?          @relation(fields: [userId], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  wishlistItems wishlistItem[]

  @@map("wishlist")
}

model wishlistItem {
  wishlistItemId Int      @id @default(autoincrement()) @map("wishlist_item_id") @db.UnsignedInt
  wishlistToken  String   @map("wishlsit_token") @db.VarChar(128)
  productId      Int      @map("product_id") @db.UnsignedInt
  variantId      Int?     @map("variant_id") @db.UnsignedInt
  wishlist       wishlist @relation(fields: [wishlistToken], references: [wishlistToken], onDelete: Cascade)

  @@map("wishlist_item")
}

enum products___typename {
  BASE
  CONFIGURABLE
}

enum users_role {
  ADMIN
  USER
}
